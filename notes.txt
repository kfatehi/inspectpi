wlan0
10.4.20.1

lease file
/var/lib/misc/udhcpd.leases

enable forwarding in kernel with
sudo sysctl -w net.ipv4.ip_forward=1
do it permanently in  /etc/sysctl.conf 

# reset the firewall
# flush all rules, delete all chains, and accept all
# accept all traffic
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
# flush the nat and mangle tables, flush all chains (-F)
sudo iptables -t nat -F
sudo iptables -t mangle -F
# and delete all non default chains (-X)
sudo iptables -F
sudo iptables -X
# now enable forwarding
sudo iptables -t nat -A POSTROUTING -j MASQUERADE

sudo sh -c "iptables-save > /etc/iptables.ipv4.nat"

in /etc/network/interfaces add this to autoload it
up iptables-restore < /etc/iptables.ipv4.nat


# aight now we need a web interface
# lets get nodejs

curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
sudo apt-get install nodejs

# lets say i wanna run something in the background via /etc/rc.local quickly
# tmux is useful for doing this when im in dev mode too. e.g.: 
#
# tmux new -d -s my-session 'watch date'
#
# great for running a bunch of things in panes too, e.g.:
# tmux new -d -s my-session 'echo window-1 pane-1; sleep 8' \; \
#           split-window -d 'echo window-1 pane-2; sleep 6' \; down-pane \; \
#             new-window -d 'echo window-2;        sleep 4' \; next-window \; \
#                 attach \;
#
# source: http://unix.stackexchange.com/questions/22682/how-to-launch-a-set-of-program-inside-tmux-or-gnome-terminal-within-a-script

# image mounting
## determine the partition offsets
fdisk -lu images/2016-11-25-raspbian-jessie-lite.img

Disk images/2016-11-25-raspbian-jessie-lite.img: 1.3 GiB, 1390411776 bytes, 2715648 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x244b8248

Device                                      Boot  Start     End Sectors  Size Id Type
images/2016-11-25-raspbian-jessie-lite.img1        8192  137215  129024   63M  c W95 FAT32 (LBA)
images/2016-11-25-raspbian-jessie-lite.img2      137216 2715647 2578432  1.2G 83 Linux

## mount the partitions you want by specifying the offset
sudo mount -t auto -o loop,offset=$((8192*512)) images/2016-11-25-raspbian-jessie-lite.img mnt
sudo mount -t auto -o loop,offset=$((137216*512)) images/2016-11-25-raspbian-jessie-lite.img mnt

# source http://www.linuxquestions.org/questions/linux-general-1/how-to-mount-img-file-882386/

##--- 

installed and configured udhcpd on the zero. didn't test yet.
currently looking to create a PPP network adapter that allows the serial connection between 3 and zero
to use IP, this way we should be able to communicate from the dev host to the target host through
the 3 and the zero. the 10.5 to 10.4 jump will the going over the PPP/serial so it will be slow
but the transfers and stuff happening over this line will never be more than a backup or something.
and for those situations an image copy or image mount may be more appropriate anyway.
the usefulness of doing this is pretty much to be able to run scripts on the target, orchestrated
from the inspectpi webinterface in a more reliable way than doing it through the serial line
directly without using PPP. for example here is the naiive approach:

https://gitlab.keyvan.pw/crumple/workbench/blob/master/lib/serial-tty.js

it is clear to see how much extra code had to be written to deal with the error-prone-ness of that approach

in the case of inspectpi, however, we have time to look at better approaches (SLIP, PPP):

https://en.wikibooks.org/wiki/Serial_Programming/IP_Over_Serial_Connections

## on the pi3:
sudo slattach -p slip -s 115200 /dev/ttyAMA0 
sudo ifconfig sl0 10.1.1.1 pointtopoint 10.1.1.0 up 
sudo route add -host 10.1.1.0  dev sl0

## on the pi zero:
sudo slattach -p slip -s 115200 /dev/ttyAMA0 
sudo ifconfig sl0 10.1.1.0 pointtopoint 10.1.1.1 up 
sudo route add -host 10.1.1.1  dev sl0




that works, but we would need to specify a route for hop
what if we configure it with our 10.4 and 10.5 addresses?


## on the pi3:
sudo slattach -p slip -s 115200 /dev/ttyAMA0 
sudo ifconfig sl0 10.5.20.2 pointtopoint 10.5.20.1 up 
sudo route add -host 10.5.20.1  dev sl0

## on the pi zero:
sudo slattach -p slip -s 115200 /dev/ttyAMA0 
sudo ifconfig sl0 10.4.20.2 pointtopoint 10.4.20.1 up 
sudo route add -host 10.4.20.1  dev sl0

this configuration sets up routes correctly such that
hosts on the pi3 network can reach hosts on the pizero
network! ready to set it up for auto-configuration on boot

also useful link:

http://lallafa.de/blog/amiga-projects/plip2slip/plip2slip-setup/


ok all configured. pretty sick, will be a little tough to document...
but let's try. first a diagram:


                [ workstation ]
                [  wifi nic   ]
                       |
                       |
      [         wlan0 (10.4.20.1)       ]
      [                pi3              ]
      [   sl0 (172.16.1.1)     wlan1    ]
              |                  |
              |                 WAN
  [   sl0 (172.16.1.2)  ] 
  [        pizero       ]
  [         usb0        ]
             |
             |
  [  usb0 (10.5.20.20)  ]
  [       target        ]

The result of all this is that the workstation,
pi3, and pi zero can all access the target via
the static IP: 10.5.20.20

the relevant configs of each are placed in
folders named pi3, and pizero

# ssh target

from: https://www.raspberrypi.org/documentation/remote-access/ssh/README.md

As of the November 2016 release, Raspbian has the SSH server disabled by default. You will have to enable it manually. This is done using raspi-config:

Enter sudo raspi-config in the terminal, first select Interfacing options, then navigate to ssh, press Enter and select  Enable or disable ssh server.

For headless setup, SSH can be enabled by placing a file named 'ssh', without any extension, onto the boot partition of the SD card.

# hterm

added hterm to main project folder (libapps)

embed instructions are here
https://chromium.googlesource.com/apps/libapps/+/HEAD/hterm/doc/embed.md

LIBDOT_SEARCH_PATH=$(pwd) ./libdot/bin/concat.sh -i    ./hterm/concat/hterm_all.concat -o ../webapp/lib/hterm_all.js
